@page "/add-product"
@using BlazorCRUD.library
@inject HttpClient http

<h3>Create New Product</h3>

<div class="card p-4">
    <form>
        <div class="form-group">
            <label for="productName">Name</label>
            <input type="text" id="productName" class="form-control" @bind="NewProduct.Name" required />
        </div>

        <div class="form-group">
            <label for="productDescription">Description</label>
            <textarea id="productDescription" class="form-control" @bind="NewProduct.Description" required></textarea>
        </div>

        <div class="form-group">
            <label for="productCategory">Category</label>
            <input type="text" id="productCategory" class="form-control" @bind="NewProduct.Category" required />
        </div>

        <div class="form-group">
            <label for="productPrice">Price</label>
            <input type="number" id="productPrice" class="form-control" @bind="NewProduct.Price" step="0.01" required />
        </div>

    

        <div class="form-group">
            <label for="productImageUrl">Image URL</label>
            <input type="url" id="productImageUrl" class="form-control" @bind="NewProduct.ImageUrl" />
        </div>

        <button type="button" class="btn btn-primary mt-3" @onclick="Createproduct">Create</button>
        <button type="button" class="btn btn-secondary mt-3" @onclick="Cancel">Cancel</button>
    </form>
</div>

@code {
    [Parameter] public EventCallback<Product> OnProductCreated { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private Product NewProduct { get; set; } = new Product();

    private async Task Createproduct()
    {
        try
        {
            var response = await http.PostAsJsonAsync("https://localhost:7007/api/Products", NewProduct);

            if (response.IsSuccessStatusCode)
            {
                var createdProduct = await response.Content.ReadFromJsonAsync<Product>();
                await OnProductCreated.InvokeAsync(createdProduct);
            }
            else
            {
                Console.Error.WriteLine("Failed to create product.");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error creating product: {ex.Message}");
        }
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync();
    }
}

